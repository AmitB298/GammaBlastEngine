from __future__ import annotations
from typing import Any, Dict, Optional
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from ..config import load_settings, load_toggles, save_toggles

router = APIRouter(tags=["toggles"])

class TogglesIn(BaseModel):
    sentiment_enabled: Optional[bool] = None

    class Config:
        extra = "allow"  # accept other keys but we won't validate them tightly

class TogglesOut(BaseModel):
    data: Dict[str, Any]

@router.get("/toggles", response_model=TogglesOut)
def get_toggles():
    settings = load_settings()
    data = load_toggles(settings.toggles_path)
    return TogglesOut(data=data)

@router.put("/toggles", response_model=TogglesOut)
def put_toggles(payload: TogglesIn):
    settings = load_settings()
    current = load_toggles(settings.toggles_path)
    # Apply only provided fields; keep others as-is
    updates = payload.dict(exclude_unset=True)
    current.update(updates)
    try:
        save_toggles(settings.toggles_path, current)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to persist toggles: {e}")
    return TogglesOut(data=current)
